buildscript {
    repositories {
        maven { url = 'https://maven.minecraftforge.net' }
        mavenCentral()
    }
    dependencies {
        classpath group: 'net.minecraftforge.gradle', name: 'ForgeGradle', version: '5.1.+', changing: true
        classpath group: 'org.spongepowered', name: 'mixingradle', version: '0.7.+'
    }
}

plugins {
    id 'eclipse'
    id 'maven-publish'
}

apply plugin: 'net.minecraftforge.gradle'
apply plugin: 'org.spongepowered.mixin'
apply from: 'minecraft.gradle'

group = mod_group
archivesBaseName = "$mod_name-$minecraft_version-$minecraft_sdk"

java.toolchain {
    languageVersion = JavaLanguageVersion.of(17)
    vendor = JvmVendorSpec.ADOPTOPENJDK
}

tasks.withType(JavaCompile).configureEach {
    options.encoding = 'UTF-8'
}

println('Java: ' + System.getProperty('java.version') + ' JVM: ' + System.getProperty('java.vm.version') + '(' + System.getProperty('java.vendor') + ') Arch: ' + System.getProperty('os.arch'))
minecraft {
    mappings channel: mappings_channel, version: minecraft_version

    // accessTransformer = file('src/main/resources/META-INF/accesstransformer.cfg')

    runs {
        all {
            // Recommended logging data for a userdev environment
            // The markers can be changed as needed.
            // "SCAN": For mods scan.
            // "REGISTRIES": For firing of registry events.
            // "REGISTRYDUMP": For getting the contents of all registries.
            property 'forge.logging.markers', 'SCAN,REGISTRIES,REGISTRYDUMP'

            // Recommended logging level for the console
            // You can set various levels here.
            // Please read: https://stackoverflow.com/questions/2031163/when-to-use-the-different-log-levels
            property 'forge.logging.console.level', 'debug'

            mods {
                oc2_nixos {
                    source sourceSets.main
                }
            }
        }

        client {
            workingDirectory project.file('run')
        }

        server {
            workingDirectory project.file('run')
            arg "--nogui"
        }

        data {
            workingDirectory project.file('run')

            // Specify the modid for data generation, where to output the resulting resource, and where to look for existing resources.
            args '--mod', mod_id, '--all', '--output', file('src/generated/resources/'), '--existing', file('src/main/resources/')
        }
    }
}

// Include resources generated by data generators.
sourceSets.main.resources { srcDir 'src/generated/resources' }

repositories {
    mavenCentral()
    maven {
        url 'https://cursemaven.com'
        content { includeGroup 'curse.maven' }
    }
    ["fnuecke/oc2", "fnuecke/SednaMinecraft"].forEach(repo -> {
        maven {
            url = uri("https://maven.pkg.github.com/${repo}")
            credentials {
                username = project.findProperty("gpr.user") ?: System.getenv("GPR_USER")
                password = project.findProperty("gpr.key") ?: System.getenv("GPR_KEY")
            }
        }
    })
}

dependencies {
    minecraft "net.minecraftforge:forge:${minecraft_version}-${forge_version}"

    implementation "li.cil.sedna:sedna-${minecraft_version}-${minecraft_sdk}:1.0.12"

    // compileOnly fg.deobf("li.cil.oc2:oc2-${minecraft_version}-${minecraft_sdk}-api:0.1.6")
    implementation fg.deobf("li.cil.oc2:oc2-${minecraft_version}-${minecraft_sdk}:0.1.6")

    runtimeOnly fg.deobf("curse.maven:markdownmanual-502485:3565800") {
        because "dependency of oc2"
    }
}

processResources {
    from(sourceSets.main.resources.srcDirs) {
        include 'META-INF/mods.toml'

        // may not be needed in Gradle 8
        duplicatesStrategy = 'include'

        expand([
                'mod_id': mod_id,
                'mod_version': mod_version,
                'mod_name': mod_name,
                'mod_authors': mod_authors,
                // 'mod_url': mod_url,
                // 'mod_issues_url': mod_issues_url,
                'forge_version': forge_version,
                'minecraft_version': minecraft_version,
        ])
    }
}

// Example for how to get properties into the manifest for reading by the runtime..
jar {
    finalizedBy 'reobfJar'

    manifest {
        attributes([
            // 'FMLAT': 'accesstransformer.cfg',
            "Specification-Title": mod_id,
            "Specification-Vendor": mod_vendor,
            "Specification-Version": "1",
            "Implementation-Title": project.name,
            "Implementation-Version": mod_version,
            "Implementation-Vendor" : mod_vendor,
            "Implementation-Timestamp": new Date().format("yyyy-MM-dd'T'HH:mm:ssZ")
        ])
    }
}

// Example configuration to allow publishing using the maven-publish task
// This is the preferred method to reobfuscate your jar file
// jar.finalizedBy('reobfJar')
// However if you are in a multi-project build, dev time needs unobfed jar files, so you can delay the obfuscation until publishing by doing
// publish.dependsOn('reobfJar')

publishing {
    publications {
        mavenJava(MavenPublication) {
            artifact jar
        }
    }
    repositories {
        maven {
            url "file:///${project.projectDir}/mcmodsrepo"
        }
    }
}
